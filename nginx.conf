# MAKE SURE TO PLACE THIS IN THE AZURE FILE SHARE FOR IT TO BE USED

# Run as a less privileged user for security reasons.
user nginx;

worker_processes auto;

events {
  worker_connections 1024;
}

pid        /var/run/nginx.pid;

http {

    server {
        listen 80;
        server_name example.eastus.azurecontainer.io;
		# server_name localhost;
		
		access_log  /etc/nginx/logs/access_80.log;
		error_log /etc/nginx/logs/error_80.log;
		
		location ^~ /.well-known {
		  allow all;
		  root  /data/letsencrypt/;
		}
		location / {
			return 301 https://$host$request_uri;
		}
    }

    server {
        listen 443 ssl;
		
		access_log  /etc/nginx/logs/access.log;
		error_log /etc/nginx/logs/error.log;
		
		server_name example.eastus.azurecontainer.io;

        # Protect against the BEAST attack by not using SSLv3 at all.
        ssl_protocols              TLSv1 TLSv1.1 TLSv1.2;

        # Ciphers set to best allow protection from Beast, while providing forwarding secrecy, as defined by Mozilla - https://wiki.mozilla.org/Security/Server_Side_TLS#Nginx
        # ssl_ciphers                ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK;
        # ssl_prefer_server_ciphers  on;

        # Optimize SSL by caching session parameters for 10 minutes. This cuts down on the number of expensive SSL handshakes.
        # By enabling a cache (of type "shared between all Nginx workers"), we tell the client to re-use the already negotiated state.
        ssl_session_cache    shared:SSL:10m; # a 1mb cache can hold about 4000 sessions, so we can hold 40000 sessions
        ssl_session_timeout  24h;


        # Use a higher keepalive timeout to reduce the need for repeated handshakes
        keepalive_timeout 300; # up from 75 secs default

        # remember the certificate for 30 days and automatically connect to HTTPS
		# uncomment only after testing
		# add_header Strict-Transport-Security 'max-age=2600000; includeSubDomains';

	
		ssl_certificate      /etc/nginx/certs/example.eastus.azurecontainer.io/fullchain.pem;
        ssl_certificate_key  /etc/nginx/certs/example.eastus.azurecontainer.io/privkey.pem;

		# ssl_certificate /etc/letsencrypt/live/example.eastus.azurecontainer.io/fullchain.pem;
		# ssl_certificate_key /etc/letsencrypt/live/example.eastus.azurecontainer.io/privkey.pem;

		location /.well-known {
		  allow all;
		  alias  /data/letsencrypt/.well-known;
		}

        location / {
			# allow/deny IP addresses
			# allow 0.0.0.0
			# deny all;
			
			proxy_pass http://localhost:8080; #  replace port if app listens on port other than 8080
            
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
        }
    }
}